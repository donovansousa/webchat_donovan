{"ast":null,"code":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\nvar util = require('util'),\n    events = require('events'),\n    http = require('http'),\n    crypto = require('crypto'),\n    Options = require('options'),\n    WebSocket = require('./WebSocket'),\n    Extensions = require('./Extensions'),\n    PerMessageDeflate = require('./PerMessageDeflate'),\n    tls = require('tls'),\n    url = require('url');\n/**\n * WebSocket Server implementation\n */\n\n\nfunction WebSocketServer(options, callback) {\n  if (this instanceof WebSocketServer === false) {\n    return new WebSocketServer(options, callback);\n  }\n\n  events.EventEmitter.call(this);\n  options = new Options({\n    host: '0.0.0.0',\n    port: null,\n    server: null,\n    verifyClient: null,\n    handleProtocols: null,\n    path: null,\n    noServer: false,\n    disableHixie: false,\n    clientTracking: true,\n    perMessageDeflate: true,\n    maxPayload: 100 * 1024 * 1024\n  }).merge(options);\n\n  if (!options.isDefinedAndNonNull('port') && !options.isDefinedAndNonNull('server') && !options.value.noServer) {\n    throw new TypeError('`port` or a `server` must be provided');\n  }\n\n  var self = this;\n\n  if (options.isDefinedAndNonNull('port')) {\n    this._server = http.createServer(function (req, res) {\n      var body = http.STATUS_CODES[426];\n      res.writeHead(426, {\n        'Content-Length': body.length,\n        'Content-Type': 'text/plain'\n      });\n      res.end(body);\n    });\n    this._server.allowHalfOpen = false;\n\n    this._server.listen(options.value.port, options.value.host, callback);\n\n    this._closeServer = function () {\n      if (self._server) self._server.close();\n    };\n  } else if (options.value.server) {\n    this._server = options.value.server;\n\n    if (options.value.path) {\n      // take note of the path, to avoid collisions when multiple websocket servers are\n      // listening on the same http server\n      if (this._server._webSocketPaths && options.value.server._webSocketPaths[options.value.path]) {\n        throw new Error('two instances of WebSocketServer cannot listen on the same http server path');\n      }\n\n      if (typeof this._server._webSocketPaths !== 'object') {\n        this._server._webSocketPaths = {};\n      }\n\n      this._server._webSocketPaths[options.value.path] = 1;\n    }\n  }\n\n  if (this._server) {\n    this._onceServerListening = function () {\n      self.emit('listening');\n    };\n\n    this._server.once('listening', this._onceServerListening);\n  }\n\n  if (typeof this._server != 'undefined') {\n    this._onServerError = function (error) {\n      self.emit('error', error);\n    };\n\n    this._server.on('error', this._onServerError);\n\n    this._onServerUpgrade = function (req, socket, upgradeHead) {\n      //copy upgradeHead to avoid retention of large slab buffers used in node core\n      var head = new Buffer(upgradeHead.length);\n      upgradeHead.copy(head);\n      self.handleUpgrade(req, socket, head, function (client) {\n        self.emit('connection' + req.url, client);\n        self.emit('connection', client);\n      });\n    };\n\n    this._server.on('upgrade', this._onServerUpgrade);\n  }\n\n  this.options = options.value;\n  this.path = options.value.path;\n  this.clients = [];\n}\n/**\n * Inherits from EventEmitter.\n */\n\n\nutil.inherits(WebSocketServer, events.EventEmitter);\n/**\n * Immediately shuts down the connection.\n *\n * @api public\n */\n\nWebSocketServer.prototype.close = function (callback) {\n  // terminate all associated clients\n  var error = null;\n\n  try {\n    for (var i = 0, l = this.clients.length; i < l; ++i) {\n      this.clients[i].terminate();\n    }\n  } catch (e) {\n    error = e;\n  } // remove path descriptor, if any\n\n\n  if (this.path && this._server._webSocketPaths) {\n    delete this._server._webSocketPaths[this.path];\n\n    if (Object.keys(this._server._webSocketPaths).length == 0) {\n      delete this._server._webSocketPaths;\n    }\n  } // close the http server if it was internally created\n\n\n  try {\n    if (typeof this._closeServer !== 'undefined') {\n      this._closeServer();\n    }\n  } finally {\n    if (this._server) {\n      this._server.removeListener('listening', this._onceServerListening);\n\n      this._server.removeListener('error', this._onServerError);\n\n      this._server.removeListener('upgrade', this._onServerUpgrade);\n    }\n\n    delete this._server;\n  }\n\n  if (callback) callback(error);else if (error) throw error;\n};\n/**\n * Handle a HTTP Upgrade request.\n *\n * @api public\n */\n\n\nWebSocketServer.prototype.handleUpgrade = function (req, socket, upgradeHead, cb) {\n  // check for wrong path\n  if (this.options.path) {\n    var u = url.parse(req.url);\n    if (u && u.pathname !== this.options.path) return;\n  }\n\n  if (typeof req.headers.upgrade === 'undefined' || req.headers.upgrade.toLowerCase() !== 'websocket') {\n    abortConnection(socket, 400, 'Bad Request');\n    return;\n  }\n\n  if (req.headers['sec-websocket-key1']) handleHixieUpgrade.apply(this, arguments);else handleHybiUpgrade.apply(this, arguments);\n};\n\nmodule.exports = WebSocketServer;\n/**\n * Entirely private apis,\n * which may or may not be bound to a sepcific WebSocket instance.\n */\n\nfunction handleHybiUpgrade(req, socket, upgradeHead, cb) {\n  // handle premature socket errors\n  var errorHandler = function errorHandler() {\n    try {\n      socket.destroy();\n    } catch (e) {}\n  };\n\n  socket.on('error', errorHandler); // verify key presence\n\n  if (!req.headers['sec-websocket-key']) {\n    abortConnection(socket, 400, 'Bad Request');\n    return;\n  } // verify version\n\n\n  var version = parseInt(req.headers['sec-websocket-version']);\n\n  if ([8, 13].indexOf(version) === -1) {\n    abortConnection(socket, 400, 'Bad Request');\n    return;\n  } // verify protocol\n\n\n  var protocols = req.headers['sec-websocket-protocol']; // verify client\n\n  var origin = version < 13 ? req.headers['sec-websocket-origin'] : req.headers['origin']; // handle extensions offer\n\n  var extensionsOffer = Extensions.parse(req.headers['sec-websocket-extensions']); // handler to call when the connection sequence completes\n\n  var self = this;\n\n  var completeHybiUpgrade2 = function completeHybiUpgrade2(protocol) {\n    // calc key\n    var key = req.headers['sec-websocket-key'];\n    var shasum = crypto.createHash('sha1');\n    shasum.update(key + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\");\n    key = shasum.digest('base64');\n    var headers = ['HTTP/1.1 101 Switching Protocols', 'Upgrade: websocket', 'Connection: Upgrade', 'Sec-WebSocket-Accept: ' + key];\n\n    if (typeof protocol != 'undefined') {\n      headers.push('Sec-WebSocket-Protocol: ' + protocol);\n    }\n\n    var extensions = {};\n\n    try {\n      extensions = acceptExtensions.call(self, extensionsOffer);\n    } catch (err) {\n      abortConnection(socket, 400, 'Bad Request');\n      return;\n    }\n\n    if (Object.keys(extensions).length) {\n      var serverExtensions = {};\n      Object.keys(extensions).forEach(function (token) {\n        serverExtensions[token] = [extensions[token].params];\n      });\n      headers.push('Sec-WebSocket-Extensions: ' + Extensions.format(serverExtensions));\n    } // allows external modification/inspection of handshake headers\n\n\n    self.emit('headers', headers);\n    socket.setTimeout(0);\n    socket.setNoDelay(true);\n\n    try {\n      socket.write(headers.concat('', '').join('\\r\\n'));\n    } catch (e) {\n      // if the upgrade write fails, shut the connection down hard\n      try {\n        socket.destroy();\n      } catch (e) {}\n\n      return;\n    }\n\n    var client = new WebSocket([req, socket, upgradeHead], {\n      protocolVersion: version,\n      protocol: protocol,\n      extensions: extensions,\n      maxPayload: self.options.maxPayload\n    });\n\n    if (self.options.clientTracking) {\n      self.clients.push(client);\n      client.on('close', function () {\n        var index = self.clients.indexOf(client);\n\n        if (index != -1) {\n          self.clients.splice(index, 1);\n        }\n      });\n    } // signal upgrade complete\n\n\n    socket.removeListener('error', errorHandler);\n    cb(client);\n  }; // optionally call external protocol selection handler before\n  // calling completeHybiUpgrade2\n\n\n  var completeHybiUpgrade1 = function completeHybiUpgrade1() {\n    // choose from the sub-protocols\n    if (typeof self.options.handleProtocols == 'function') {\n      var protList = (protocols || \"\").split(/, */);\n      var callbackCalled = false;\n      var res = self.options.handleProtocols(protList, function (result, protocol) {\n        callbackCalled = true;\n        if (!result) abortConnection(socket, 401, 'Unauthorized');else completeHybiUpgrade2(protocol);\n      });\n\n      if (!callbackCalled) {\n        // the handleProtocols handler never called our callback\n        abortConnection(socket, 501, 'Could not process protocols');\n      }\n\n      return;\n    } else {\n      if (typeof protocols !== 'undefined') {\n        completeHybiUpgrade2(protocols.split(/, */)[0]);\n      } else {\n        completeHybiUpgrade2();\n      }\n    }\n  }; // optionally call external client verification handler\n\n\n  if (typeof this.options.verifyClient == 'function') {\n    var info = {\n      origin: origin,\n      secure: typeof req.connection.authorized !== 'undefined' || typeof req.connection.encrypted !== 'undefined',\n      req: req\n    };\n\n    if (this.options.verifyClient.length == 2) {\n      this.options.verifyClient(info, function (result, code, name) {\n        if (typeof code === 'undefined') code = 401;\n        if (typeof name === 'undefined') name = http.STATUS_CODES[code];\n        if (!result) abortConnection(socket, code, name);else completeHybiUpgrade1();\n      });\n      return;\n    } else if (!this.options.verifyClient(info)) {\n      abortConnection(socket, 401, 'Unauthorized');\n      return;\n    }\n  }\n\n  completeHybiUpgrade1();\n}\n\nfunction handleHixieUpgrade(req, socket, upgradeHead, cb) {\n  // handle premature socket errors\n  var errorHandler = function errorHandler() {\n    try {\n      socket.destroy();\n    } catch (e) {}\n  };\n\n  socket.on('error', errorHandler); // bail if options prevent hixie\n\n  if (this.options.disableHixie) {\n    abortConnection(socket, 401, 'Hixie support disabled');\n    return;\n  } // verify key presence\n\n\n  if (!req.headers['sec-websocket-key2']) {\n    abortConnection(socket, 400, 'Bad Request');\n    return;\n  }\n\n  var origin = req.headers['origin'],\n      self = this; // setup handshake completion to run after client has been verified\n\n  var onClientVerified = function onClientVerified() {\n    var wshost;\n    if (!req.headers['x-forwarded-host']) wshost = req.headers.host;else wshost = req.headers['x-forwarded-host'];\n    var location = (req.headers['x-forwarded-proto'] === 'https' || socket.encrypted ? 'wss' : 'ws') + '://' + wshost + req.url,\n        protocol = req.headers['sec-websocket-protocol']; // build the response header and return a Buffer\n\n    var buildResponseHeader = function buildResponseHeader() {\n      var headers = ['HTTP/1.1 101 Switching Protocols', 'Upgrade: WebSocket', 'Connection: Upgrade', 'Sec-WebSocket-Location: ' + location];\n      if (typeof protocol != 'undefined') headers.push('Sec-WebSocket-Protocol: ' + protocol);\n      if (typeof origin != 'undefined') headers.push('Sec-WebSocket-Origin: ' + origin);\n      return new Buffer(headers.concat('', '').join('\\r\\n'));\n    }; // send handshake response before receiving the nonce\n\n\n    var handshakeResponse = function handshakeResponse() {\n      socket.setTimeout(0);\n      socket.setNoDelay(true);\n      var headerBuffer = buildResponseHeader();\n\n      try {\n        socket.write(headerBuffer, 'binary', function (err) {\n          // remove listener if there was an error\n          if (err) socket.removeListener('data', handler);\n          return;\n        });\n      } catch (e) {\n        try {\n          socket.destroy();\n        } catch (e) {}\n\n        return;\n      }\n\n      ;\n    }; // handshake completion code to run once nonce has been successfully retrieved\n\n\n    var completeHandshake = function completeHandshake(nonce, rest, headerBuffer) {\n      // calculate key\n      var k1 = req.headers['sec-websocket-key1'],\n          k2 = req.headers['sec-websocket-key2'],\n          md5 = crypto.createHash('md5');\n      [k1, k2].forEach(function (k) {\n        var n = parseInt(k.replace(/[^\\d]/g, '')),\n            spaces = k.replace(/[^ ]/g, '').length;\n\n        if (spaces === 0 || n % spaces !== 0) {\n          abortConnection(socket, 400, 'Bad Request');\n          return;\n        }\n\n        n /= spaces;\n        md5.update(String.fromCharCode(n >> 24 & 0xFF, n >> 16 & 0xFF, n >> 8 & 0xFF, n & 0xFF));\n      });\n      md5.update(nonce.toString('binary'));\n      socket.setTimeout(0);\n      socket.setNoDelay(true);\n\n      try {\n        var hashBuffer = new Buffer(md5.digest('binary'), 'binary');\n        var handshakeBuffer = new Buffer(headerBuffer.length + hashBuffer.length);\n        headerBuffer.copy(handshakeBuffer, 0);\n        hashBuffer.copy(handshakeBuffer, headerBuffer.length); // do a single write, which - upon success - causes a new client websocket to be setup\n\n        socket.write(handshakeBuffer, 'binary', function (err) {\n          if (err) return; // do not create client if an error happens\n\n          var client = new WebSocket([req, socket, rest], {\n            protocolVersion: 'hixie-76',\n            protocol: protocol\n          });\n\n          if (self.options.clientTracking) {\n            self.clients.push(client);\n            client.on('close', function () {\n              var index = self.clients.indexOf(client);\n\n              if (index != -1) {\n                self.clients.splice(index, 1);\n              }\n            });\n          } // signal upgrade complete\n\n\n          socket.removeListener('error', errorHandler);\n          cb(client);\n        });\n      } catch (e) {\n        try {\n          socket.destroy();\n        } catch (e) {}\n\n        return;\n      }\n    }; // retrieve nonce\n\n\n    var nonceLength = 8;\n\n    if (upgradeHead && upgradeHead.length >= nonceLength) {\n      var nonce = upgradeHead.slice(0, nonceLength);\n      var rest = upgradeHead.length > nonceLength ? upgradeHead.slice(nonceLength) : null;\n      completeHandshake.call(self, nonce, rest, buildResponseHeader());\n    } else {\n      // nonce not present in upgradeHead\n      var nonce = new Buffer(nonceLength);\n      upgradeHead.copy(nonce, 0);\n      var received = upgradeHead.length;\n      var rest = null;\n\n      var handler = function handler(data) {\n        var toRead = Math.min(data.length, nonceLength - received);\n        if (toRead === 0) return;\n        data.copy(nonce, received, 0, toRead);\n        received += toRead;\n\n        if (received == nonceLength) {\n          socket.removeListener('data', handler);\n          if (toRead < data.length) rest = data.slice(toRead); // complete the handshake but send empty buffer for headers since they have already been sent\n\n          completeHandshake.call(self, nonce, rest, new Buffer(0));\n        }\n      }; // handle additional data as we receive it\n\n\n      socket.on('data', handler); // send header response before we have the nonce to fix haproxy buffering\n\n      handshakeResponse();\n    }\n  }; // verify client\n\n\n  if (typeof this.options.verifyClient == 'function') {\n    var info = {\n      origin: origin,\n      secure: typeof req.connection.authorized !== 'undefined' || typeof req.connection.encrypted !== 'undefined',\n      req: req\n    };\n\n    if (this.options.verifyClient.length == 2) {\n      var self = this;\n      this.options.verifyClient(info, function (result, code, name) {\n        if (typeof code === 'undefined') code = 401;\n        if (typeof name === 'undefined') name = http.STATUS_CODES[code];\n        if (!result) abortConnection(socket, code, name);else onClientVerified.apply(self);\n      });\n      return;\n    } else if (!this.options.verifyClient(info)) {\n      abortConnection(socket, 401, 'Unauthorized');\n      return;\n    }\n  } // no client verification required\n\n\n  onClientVerified();\n}\n\nfunction acceptExtensions(offer) {\n  var extensions = {};\n  var options = this.options.perMessageDeflate;\n  var maxPayload = this.options.maxPayload;\n\n  if (options && offer[PerMessageDeflate.extensionName]) {\n    var perMessageDeflate = new PerMessageDeflate(options !== true ? options : {}, true, maxPayload);\n    perMessageDeflate.accept(offer[PerMessageDeflate.extensionName]);\n    extensions[PerMessageDeflate.extensionName] = perMessageDeflate;\n  }\n\n  return extensions;\n}\n\nfunction abortConnection(socket, code, name) {\n  try {\n    var response = ['HTTP/1.1 ' + code + ' ' + name, 'Content-type: text/html'];\n    socket.write(response.concat('', '').join('\\r\\n'));\n  } catch (e) {\n    /* ignore errors - we've aborted this connection */\n  } finally {\n    // ensure that an early aborted connection is shut down completely\n    try {\n      socket.destroy();\n    } catch (e) {}\n  }\n}","map":null,"metadata":{},"sourceType":"script"}