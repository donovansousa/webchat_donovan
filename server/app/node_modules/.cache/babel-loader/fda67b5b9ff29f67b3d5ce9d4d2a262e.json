{"ast":null,"code":"/*!\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\nvar fs = require('fs');\n\nfunction Options(defaults) {\n  var internalValues = {};\n  var values = this.value = {};\n  Object.keys(defaults).forEach(function (key) {\n    internalValues[key] = defaults[key];\n    Object.defineProperty(values, key, {\n      get: function get() {\n        return internalValues[key];\n      },\n      configurable: false,\n      enumerable: true\n    });\n  });\n\n  this.reset = function () {\n    Object.keys(defaults).forEach(function (key) {\n      internalValues[key] = defaults[key];\n    });\n    return this;\n  };\n\n  this.merge = function (options, required) {\n    options = options || {};\n\n    if (Object.prototype.toString.call(required) === '[object Array]') {\n      var missing = [];\n\n      for (var i = 0, l = required.length; i < l; ++i) {\n        var key = required[i];\n\n        if (!(key in options)) {\n          missing.push(key);\n        }\n      }\n\n      if (missing.length > 0) {\n        if (missing.length > 1) {\n          throw new Error('options ' + missing.slice(0, missing.length - 1).join(', ') + ' and ' + missing[missing.length - 1] + ' must be defined');\n        } else throw new Error('option ' + missing[0] + ' must be defined');\n      }\n    }\n\n    Object.keys(options).forEach(function (key) {\n      if (key in internalValues) {\n        internalValues[key] = options[key];\n      }\n    });\n    return this;\n  };\n\n  this.copy = function (keys) {\n    var obj = {};\n    Object.keys(defaults).forEach(function (key) {\n      if (keys.indexOf(key) !== -1) {\n        obj[key] = values[key];\n      }\n    });\n    return obj;\n  };\n\n  this.read = function (filename, cb) {\n    if (typeof cb == 'function') {\n      var self = this;\n      fs.readFile(filename, function (error, data) {\n        if (error) return cb(error);\n        var conf = JSON.parse(data);\n        self.merge(conf);\n        cb();\n      });\n    } else {\n      var conf = JSON.parse(fs.readFileSync(filename));\n      this.merge(conf);\n    }\n\n    return this;\n  };\n\n  this.isDefined = function (key) {\n    return typeof values[key] != 'undefined';\n  };\n\n  this.isDefinedAndNonNull = function (key) {\n    return typeof values[key] != 'undefined' && values[key] !== null;\n  };\n\n  Object.freeze(values);\n  Object.freeze(this);\n}\n\nmodule.exports = Options;","map":null,"metadata":{},"sourceType":"script"}