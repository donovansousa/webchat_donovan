{"ast":null,"code":"var util = require('util');\n/**\n * Module exports.\n */\n\n\nexports.parse = parse;\nexports.format = format;\n/**\n * Parse extensions header value\n */\n\nfunction parse(value) {\n  value = value || '';\n  var extensions = {};\n  value.split(',').forEach(function (v) {\n    var params = v.split(';');\n    var token = params.shift().trim();\n\n    if (extensions[token] === undefined) {\n      extensions[token] = [];\n    } else if (!extensions.hasOwnProperty(token)) {\n      return;\n    }\n\n    var parsedParams = {};\n    params.forEach(function (param) {\n      var parts = param.trim().split('=');\n      var key = parts[0];\n      var value = parts[1];\n\n      if (typeof value === 'undefined') {\n        value = true;\n      } else {\n        // unquote value\n        if (value[0] === '\"') {\n          value = value.slice(1);\n        }\n\n        if (value[value.length - 1] === '\"') {\n          value = value.slice(0, value.length - 1);\n        }\n      }\n\n      if (parsedParams[key] === undefined) {\n        parsedParams[key] = [value];\n      } else if (parsedParams.hasOwnProperty(key)) {\n        parsedParams[key].push(value);\n      }\n    });\n    extensions[token].push(parsedParams);\n  });\n  return extensions;\n}\n/**\n * Format extensions header value\n */\n\n\nfunction format(value) {\n  return Object.keys(value).map(function (token) {\n    var paramsList = value[token];\n\n    if (!util.isArray(paramsList)) {\n      paramsList = [paramsList];\n    }\n\n    return paramsList.map(function (params) {\n      return [token].concat(Object.keys(params).map(function (k) {\n        var p = params[k];\n        if (!util.isArray(p)) p = [p];\n        return p.map(function (v) {\n          return v === true ? k : k + '=' + v;\n        }).join('; ');\n      })).join('; ');\n    }).join(', ');\n  }).join(', ');\n}","map":null,"metadata":{},"sourceType":"script"}