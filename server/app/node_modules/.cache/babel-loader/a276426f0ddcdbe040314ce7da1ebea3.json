{"ast":null,"code":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\nvar util = require('util'),\n    isValidUTF8 = require('./Validation'),\n    ErrorCodes = require('./ErrorCodes'),\n    BufferPool = require('./BufferPool'),\n    bufferUtil = require('./BufferUtil'),\n    PerMessageDeflate = require('./PerMessageDeflate');\n/**\n * HyBi Receiver implementation\n */\n\n\nfunction Receiver(extensions, maxPayload) {\n  if (this instanceof Receiver === false) {\n    throw new TypeError(\"Classes can't be function-called\");\n  }\n\n  if (typeof extensions === 'number') {\n    maxPayload = extensions;\n    extensions = {};\n  } // memory pool for fragmented messages\n\n\n  var fragmentedPoolPrevUsed = -1;\n  this.fragmentedBufferPool = new BufferPool(1024, function (db, length) {\n    return db.used + length;\n  }, function (db) {\n    return fragmentedPoolPrevUsed = fragmentedPoolPrevUsed >= 0 ? Math.ceil((fragmentedPoolPrevUsed + db.used) / 2) : db.used;\n  }); // memory pool for unfragmented messages\n\n  var unfragmentedPoolPrevUsed = -1;\n  this.unfragmentedBufferPool = new BufferPool(1024, function (db, length) {\n    return db.used + length;\n  }, function (db) {\n    return unfragmentedPoolPrevUsed = unfragmentedPoolPrevUsed >= 0 ? Math.ceil((unfragmentedPoolPrevUsed + db.used) / 2) : db.used;\n  });\n  this.extensions = extensions || {};\n  this.maxPayload = maxPayload || 0;\n  this.currentPayloadLength = 0;\n  this.state = {\n    activeFragmentedOperation: null,\n    lastFragment: false,\n    masked: false,\n    opcode: 0,\n    fragmentedOperation: false\n  };\n  this.overflow = [];\n  this.headerBuffer = new Buffer(10);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.currentMessage = [];\n  this.currentMessageLength = 0;\n  this.messageHandlers = [];\n  this.expectHeader(2, this.processPacket);\n  this.dead = false;\n  this.processing = false;\n\n  this.onerror = function () {};\n\n  this.ontext = function () {};\n\n  this.onbinary = function () {};\n\n  this.onclose = function () {};\n\n  this.onping = function () {};\n\n  this.onpong = function () {};\n}\n\nmodule.exports = Receiver;\n/**\n * Add new data to the parser.\n *\n * @api public\n */\n\nReceiver.prototype.add = function (data) {\n  if (this.dead) return;\n  var dataLength = data.length;\n  if (dataLength == 0) return;\n\n  if (this.expectBuffer == null) {\n    this.overflow.push(data);\n    return;\n  }\n\n  var toRead = Math.min(dataLength, this.expectBuffer.length - this.expectOffset);\n  fastCopy(toRead, data, this.expectBuffer, this.expectOffset);\n  this.expectOffset += toRead;\n\n  if (toRead < dataLength) {\n    this.overflow.push(data.slice(toRead));\n  }\n\n  while (this.expectBuffer && this.expectOffset == this.expectBuffer.length) {\n    var bufferForHandler = this.expectBuffer;\n    this.expectBuffer = null;\n    this.expectOffset = 0;\n    this.expectHandler.call(this, bufferForHandler);\n  }\n};\n/**\n * Releases all resources used by the receiver.\n *\n * @api public\n */\n\n\nReceiver.prototype.cleanup = function () {\n  this.dead = true;\n  this.overflow = null;\n  this.headerBuffer = null;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.unfragmentedBufferPool = null;\n  this.fragmentedBufferPool = null;\n  this.state = null;\n  this.currentMessage = null;\n  this.onerror = null;\n  this.ontext = null;\n  this.onbinary = null;\n  this.onclose = null;\n  this.onping = null;\n  this.onpong = null;\n};\n/**\n * Waits for a certain amount of header bytes to be available, then fires a callback.\n *\n * @api private\n */\n\n\nReceiver.prototype.expectHeader = function (length, handler) {\n  if (length == 0) {\n    handler(null);\n    return;\n  }\n\n  this.expectBuffer = this.headerBuffer.slice(this.expectOffset, this.expectOffset + length);\n  this.expectHandler = handler;\n  var toRead = length;\n\n  while (toRead > 0 && this.overflow.length > 0) {\n    var fromOverflow = this.overflow.pop();\n    if (toRead < fromOverflow.length) this.overflow.push(fromOverflow.slice(toRead));\n    var read = Math.min(fromOverflow.length, toRead);\n    fastCopy(read, fromOverflow, this.expectBuffer, this.expectOffset);\n    this.expectOffset += read;\n    toRead -= read;\n  }\n};\n/**\n * Waits for a certain amount of data bytes to be available, then fires a callback.\n *\n * @api private\n */\n\n\nReceiver.prototype.expectData = function (length, handler) {\n  if (length == 0) {\n    handler(null);\n    return;\n  }\n\n  this.expectBuffer = this.allocateFromPool(length, this.state.fragmentedOperation);\n  this.expectHandler = handler;\n  var toRead = length;\n\n  while (toRead > 0 && this.overflow.length > 0) {\n    var fromOverflow = this.overflow.pop();\n    if (toRead < fromOverflow.length) this.overflow.push(fromOverflow.slice(toRead));\n    var read = Math.min(fromOverflow.length, toRead);\n    fastCopy(read, fromOverflow, this.expectBuffer, this.expectOffset);\n    this.expectOffset += read;\n    toRead -= read;\n  }\n};\n/**\n * Allocates memory from the buffer pool.\n *\n * @api private\n */\n\n\nReceiver.prototype.allocateFromPool = function (length, isFragmented) {\n  return (isFragmented ? this.fragmentedBufferPool : this.unfragmentedBufferPool).get(length);\n};\n/**\n * Start processing a new packet.\n *\n * @api private\n */\n\n\nReceiver.prototype.processPacket = function (data) {\n  if (this.extensions[PerMessageDeflate.extensionName]) {\n    if ((data[0] & 0x30) != 0) {\n      this.error('reserved fields (2, 3) must be empty', 1002);\n      return;\n    }\n  } else {\n    if ((data[0] & 0x70) != 0) {\n      this.error('reserved fields must be empty', 1002);\n      return;\n    }\n  }\n\n  this.state.lastFragment = (data[0] & 0x80) == 0x80;\n  this.state.masked = (data[1] & 0x80) == 0x80;\n  var compressed = (data[0] & 0x40) == 0x40;\n  var opcode = data[0] & 0xf;\n\n  if (opcode === 0) {\n    if (compressed) {\n      this.error('continuation frame cannot have the Per-message Compressed bits', 1002);\n      return;\n    } // continuation frame\n\n\n    this.state.fragmentedOperation = true;\n    this.state.opcode = this.state.activeFragmentedOperation;\n\n    if (!(this.state.opcode == 1 || this.state.opcode == 2)) {\n      this.error('continuation frame cannot follow current opcode', 1002);\n      return;\n    }\n  } else {\n    if (opcode < 3 && this.state.activeFragmentedOperation != null) {\n      this.error('data frames after the initial data frame must have opcode 0', 1002);\n      return;\n    }\n\n    if (opcode >= 8 && compressed) {\n      this.error('control frames cannot have the Per-message Compressed bits', 1002);\n      return;\n    }\n\n    this.state.compressed = compressed;\n    this.state.opcode = opcode;\n\n    if (this.state.lastFragment === false) {\n      this.state.fragmentedOperation = true;\n      this.state.activeFragmentedOperation = opcode;\n    } else this.state.fragmentedOperation = false;\n  }\n\n  var handler = opcodes[this.state.opcode];\n  if (typeof handler == 'undefined') this.error('no handler for opcode ' + this.state.opcode, 1002);else {\n    handler.start.call(this, data);\n  }\n};\n/**\n * Endprocessing a packet.\n *\n * @api private\n */\n\n\nReceiver.prototype.endPacket = function () {\n  if (this.dead) return;\n  if (!this.state.fragmentedOperation) this.unfragmentedBufferPool.reset(true);else if (this.state.lastFragment) this.fragmentedBufferPool.reset(true);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n\n  if (this.state.lastFragment && this.state.opcode === this.state.activeFragmentedOperation) {\n    // end current fragmented operation\n    this.state.activeFragmentedOperation = null;\n  }\n\n  this.currentPayloadLength = 0;\n  this.state.lastFragment = false;\n  this.state.opcode = this.state.activeFragmentedOperation != null ? this.state.activeFragmentedOperation : 0;\n  this.state.masked = false;\n  this.expectHeader(2, this.processPacket);\n};\n/**\n * Reset the parser state.\n *\n * @api private\n */\n\n\nReceiver.prototype.reset = function () {\n  if (this.dead) return;\n  this.state = {\n    activeFragmentedOperation: null,\n    lastFragment: false,\n    masked: false,\n    opcode: 0,\n    fragmentedOperation: false\n  };\n  this.fragmentedBufferPool.reset(true);\n  this.unfragmentedBufferPool.reset(true);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.overflow = [];\n  this.currentMessage = [];\n  this.currentMessageLength = 0;\n  this.messageHandlers = [];\n  this.currentPayloadLength = 0;\n};\n/**\n * Unmask received data.\n *\n * @api private\n */\n\n\nReceiver.prototype.unmask = function (mask, buf, binary) {\n  if (mask != null && buf != null) bufferUtil.unmask(buf, mask);\n  if (binary) return buf;\n  return buf != null ? buf.toString('utf8') : '';\n};\n/**\n * Handles an error\n *\n * @api private\n */\n\n\nReceiver.prototype.error = function (reason, protocolErrorCode) {\n  if (this.dead) return;\n  this.reset();\n\n  if (typeof reason == 'string') {\n    this.onerror(new Error(reason), protocolErrorCode);\n  } else if (reason.constructor == Error) {\n    this.onerror(reason, protocolErrorCode);\n  } else {\n    this.onerror(new Error(\"An error occured\"), protocolErrorCode);\n  }\n\n  return this;\n};\n/**\n * Execute message handler buffers\n *\n * @api private\n */\n\n\nReceiver.prototype.flush = function () {\n  if (this.processing || this.dead) return;\n  var handler = this.messageHandlers.shift();\n  if (!handler) return;\n  this.processing = true;\n  var self = this;\n  handler(function () {\n    self.processing = false;\n    self.flush();\n  });\n};\n/**\n * Apply extensions to message\n *\n * @api private\n */\n\n\nReceiver.prototype.applyExtensions = function (messageBuffer, fin, compressed, callback) {\n  var self = this;\n\n  if (compressed) {\n    this.extensions[PerMessageDeflate.extensionName].decompress(messageBuffer, fin, function (err, buffer) {\n      if (self.dead) return;\n\n      if (err) {\n        callback(new Error('invalid compressed data'));\n        return;\n      }\n\n      callback(null, buffer);\n    });\n  } else {\n    callback(null, messageBuffer);\n  }\n};\n/**\n* Checks payload size, disconnects socket when it exceeds maxPayload\n*\n* @api private\n*/\n\n\nReceiver.prototype.maxPayloadExceeded = function (length) {\n  if (this.maxPayload === undefined || this.maxPayload === null || this.maxPayload < 1) {\n    return false;\n  }\n\n  var fullLength = this.currentPayloadLength + length;\n\n  if (fullLength < this.maxPayload) {\n    this.currentPayloadLength = fullLength;\n    return false;\n  }\n\n  this.error('payload cannot exceed ' + this.maxPayload + ' bytes', 1009);\n  this.messageBuffer = [];\n  this.cleanup();\n  return true;\n};\n/**\n * Buffer utilities\n */\n\n\nfunction readUInt16BE(start) {\n  return (this[start] << 8) + this[start + 1];\n}\n\nfunction readUInt32BE(start) {\n  return (this[start] << 24) + (this[start + 1] << 16) + (this[start + 2] << 8) + this[start + 3];\n}\n\nfunction fastCopy(length, srcBuffer, dstBuffer, dstOffset) {\n  switch (length) {\n    default:\n      srcBuffer.copy(dstBuffer, dstOffset, 0, length);\n      break;\n\n    case 16:\n      dstBuffer[dstOffset + 15] = srcBuffer[15];\n\n    case 15:\n      dstBuffer[dstOffset + 14] = srcBuffer[14];\n\n    case 14:\n      dstBuffer[dstOffset + 13] = srcBuffer[13];\n\n    case 13:\n      dstBuffer[dstOffset + 12] = srcBuffer[12];\n\n    case 12:\n      dstBuffer[dstOffset + 11] = srcBuffer[11];\n\n    case 11:\n      dstBuffer[dstOffset + 10] = srcBuffer[10];\n\n    case 10:\n      dstBuffer[dstOffset + 9] = srcBuffer[9];\n\n    case 9:\n      dstBuffer[dstOffset + 8] = srcBuffer[8];\n\n    case 8:\n      dstBuffer[dstOffset + 7] = srcBuffer[7];\n\n    case 7:\n      dstBuffer[dstOffset + 6] = srcBuffer[6];\n\n    case 6:\n      dstBuffer[dstOffset + 5] = srcBuffer[5];\n\n    case 5:\n      dstBuffer[dstOffset + 4] = srcBuffer[4];\n\n    case 4:\n      dstBuffer[dstOffset + 3] = srcBuffer[3];\n\n    case 3:\n      dstBuffer[dstOffset + 2] = srcBuffer[2];\n\n    case 2:\n      dstBuffer[dstOffset + 1] = srcBuffer[1];\n\n    case 1:\n      dstBuffer[dstOffset] = srcBuffer[0];\n  }\n}\n\nfunction clone(obj) {\n  var cloned = {};\n\n  for (var k in obj) {\n    if (obj.hasOwnProperty(k)) {\n      cloned[k] = obj[k];\n    }\n  }\n\n  return cloned;\n}\n/**\n * Opcode handlers\n */\n\n\nvar opcodes = {\n  // text\n  '1': {\n    start: function start(data) {\n      var self = this; // decode length\n\n      var firstLength = data[1] & 0x7f;\n\n      if (firstLength < 126) {\n        if (self.maxPayloadExceeded(firstLength)) {\n          self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);\n          return;\n        }\n\n        opcodes['1'].getData.call(self, firstLength);\n      } else if (firstLength == 126) {\n        self.expectHeader(2, function (data) {\n          var length = readUInt16BE.call(data, 0);\n\n          if (self.maxPayloadExceeded(length)) {\n            self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);\n            return;\n          }\n\n          opcodes['1'].getData.call(self, length);\n        });\n      } else if (firstLength == 127) {\n        self.expectHeader(8, function (data) {\n          if (readUInt32BE.call(data, 0) != 0) {\n            self.error('packets with length spanning more than 32 bit is currently not supported', 1008);\n            return;\n          }\n\n          var length = readUInt32BE.call(data, 4);\n\n          if (self.maxPayloadExceeded(length)) {\n            self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);\n            return;\n          }\n\n          opcodes['1'].getData.call(self, readUInt32BE.call(data, 4));\n        });\n      }\n    },\n    getData: function getData(length) {\n      var self = this;\n\n      if (self.state.masked) {\n        self.expectHeader(4, function (data) {\n          var mask = data;\n          self.expectData(length, function (data) {\n            opcodes['1'].finish.call(self, mask, data);\n          });\n        });\n      } else {\n        self.expectData(length, function (data) {\n          opcodes['1'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function finish(mask, data) {\n      var self = this;\n      var packet = this.unmask(mask, data, true) || new Buffer(0);\n      var state = clone(this.state);\n      this.messageHandlers.push(function (callback) {\n        self.applyExtensions(packet, state.lastFragment, state.compressed, function (err, buffer) {\n          if (err) {\n            if (err.type === 1009) {\n              return self.error('Maximumpayload exceeded in compressed text message. Aborting...', 1009);\n            }\n\n            return self.error(err.message, 1007);\n          }\n\n          if (buffer != null) {\n            if (self.maxPayload == 0 || self.maxPayload > 0 && self.currentMessageLength + buffer.length < self.maxPayload) {\n              self.currentMessage.push(buffer);\n            } else {\n              self.currentMessage = null;\n              self.currentMessage = [];\n              self.currentMessageLength = 0;\n              self.error(new Error('Maximum payload exceeded. maxPayload: ' + self.maxPayload), 1009);\n              return;\n            }\n\n            self.currentMessageLength += buffer.length;\n          }\n\n          if (state.lastFragment) {\n            var messageBuffer = Buffer.concat(self.currentMessage);\n            self.currentMessage = [];\n            self.currentMessageLength = 0;\n\n            if (!isValidUTF8(messageBuffer)) {\n              self.error('invalid utf8 sequence', 1007);\n              return;\n            }\n\n            self.ontext(messageBuffer.toString('utf8'), {\n              masked: state.masked,\n              buffer: messageBuffer\n            });\n          }\n\n          callback();\n        });\n      });\n      this.flush();\n      this.endPacket();\n    }\n  },\n  // binary\n  '2': {\n    start: function start(data) {\n      var self = this; // decode length\n\n      var firstLength = data[1] & 0x7f;\n\n      if (firstLength < 126) {\n        if (self.maxPayloadExceeded(firstLength)) {\n          self.error('Max payload exceeded in compressed text message. Aborting...', 1009);\n          return;\n        }\n\n        opcodes['2'].getData.call(self, firstLength);\n      } else if (firstLength == 126) {\n        self.expectHeader(2, function (data) {\n          var length = readUInt16BE.call(data, 0);\n\n          if (self.maxPayloadExceeded(length)) {\n            self.error('Max payload exceeded in compressed text message. Aborting...', 1009);\n            return;\n          }\n\n          opcodes['2'].getData.call(self, length);\n        });\n      } else if (firstLength == 127) {\n        self.expectHeader(8, function (data) {\n          if (readUInt32BE.call(data, 0) != 0) {\n            self.error('packets with length spanning more than 32 bit is currently not supported', 1008);\n            return;\n          }\n\n          var length = readUInt32BE.call(data, 4, true);\n\n          if (self.maxPayloadExceeded(length)) {\n            self.error('Max payload exceeded in compressed text message. Aborting...', 1009);\n            return;\n          }\n\n          opcodes['2'].getData.call(self, length);\n        });\n      }\n    },\n    getData: function getData(length) {\n      var self = this;\n\n      if (self.state.masked) {\n        self.expectHeader(4, function (data) {\n          var mask = data;\n          self.expectData(length, function (data) {\n            opcodes['2'].finish.call(self, mask, data);\n          });\n        });\n      } else {\n        self.expectData(length, function (data) {\n          opcodes['2'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function finish(mask, data) {\n      var self = this;\n      var packet = this.unmask(mask, data, true) || new Buffer(0);\n      var state = clone(this.state);\n      this.messageHandlers.push(function (callback) {\n        self.applyExtensions(packet, state.lastFragment, state.compressed, function (err, buffer) {\n          if (err) {\n            if (err.type === 1009) {\n              return self.error('Max payload exceeded in compressed binary message. Aborting...', 1009);\n            }\n\n            return self.error(err.message, 1007);\n          }\n\n          if (buffer != null) {\n            if (self.maxPayload == 0 || self.maxPayload > 0 && self.currentMessageLength + buffer.length < self.maxPayload) {\n              self.currentMessage.push(buffer);\n            } else {\n              self.currentMessage = null;\n              self.currentMessage = [];\n              self.currentMessageLength = 0;\n              self.error(new Error('Maximum payload exceeded'), 1009);\n              return;\n            }\n\n            self.currentMessageLength += buffer.length;\n          }\n\n          if (state.lastFragment) {\n            var messageBuffer = Buffer.concat(self.currentMessage);\n            self.currentMessage = [];\n            self.currentMessageLength = 0;\n            self.onbinary(messageBuffer, {\n              masked: state.masked,\n              buffer: messageBuffer\n            });\n          }\n\n          callback();\n        });\n      });\n      this.flush();\n      this.endPacket();\n    }\n  },\n  // close\n  '8': {\n    start: function start(data) {\n      var self = this;\n\n      if (self.state.lastFragment == false) {\n        self.error('fragmented close is not supported', 1002);\n        return;\n      } // decode length\n\n\n      var firstLength = data[1] & 0x7f;\n\n      if (firstLength < 126) {\n        opcodes['8'].getData.call(self, firstLength);\n      } else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function getData(length) {\n      var self = this;\n\n      if (self.state.masked) {\n        self.expectHeader(4, function (data) {\n          var mask = data;\n          self.expectData(length, function (data) {\n            opcodes['8'].finish.call(self, mask, data);\n          });\n        });\n      } else {\n        self.expectData(length, function (data) {\n          opcodes['8'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function finish(mask, data) {\n      var self = this;\n      data = self.unmask(mask, data, true);\n      var state = clone(this.state);\n      this.messageHandlers.push(function () {\n        if (data && data.length == 1) {\n          self.error('close packets with data must be at least two bytes long', 1002);\n          return;\n        }\n\n        var code = data && data.length > 1 ? readUInt16BE.call(data, 0) : 1000;\n\n        if (!ErrorCodes.isValidErrorCode(code)) {\n          self.error('invalid error code', 1002);\n          return;\n        }\n\n        var message = '';\n\n        if (data && data.length > 2) {\n          var messageBuffer = data.slice(2);\n\n          if (!isValidUTF8(messageBuffer)) {\n            self.error('invalid utf8 sequence', 1007);\n            return;\n          }\n\n          message = messageBuffer.toString('utf8');\n        }\n\n        self.onclose(code, message, {\n          masked: state.masked\n        });\n        self.reset();\n      });\n      this.flush();\n    }\n  },\n  // ping\n  '9': {\n    start: function start(data) {\n      var self = this;\n\n      if (self.state.lastFragment == false) {\n        self.error('fragmented ping is not supported', 1002);\n        return;\n      } // decode length\n\n\n      var firstLength = data[1] & 0x7f;\n\n      if (firstLength < 126) {\n        opcodes['9'].getData.call(self, firstLength);\n      } else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function getData(length) {\n      var self = this;\n\n      if (self.state.masked) {\n        self.expectHeader(4, function (data) {\n          var mask = data;\n          self.expectData(length, function (data) {\n            opcodes['9'].finish.call(self, mask, data);\n          });\n        });\n      } else {\n        self.expectData(length, function (data) {\n          opcodes['9'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function finish(mask, data) {\n      var self = this;\n      data = this.unmask(mask, data, true);\n      var state = clone(this.state);\n      this.messageHandlers.push(function (callback) {\n        self.onping(data, {\n          masked: state.masked,\n          binary: true\n        });\n        callback();\n      });\n      this.flush();\n      this.endPacket();\n    }\n  },\n  // pong\n  '10': {\n    start: function start(data) {\n      var self = this;\n\n      if (self.state.lastFragment == false) {\n        self.error('fragmented pong is not supported', 1002);\n        return;\n      } // decode length\n\n\n      var firstLength = data[1] & 0x7f;\n\n      if (firstLength < 126) {\n        opcodes['10'].getData.call(self, firstLength);\n      } else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function getData(length) {\n      var self = this;\n\n      if (this.state.masked) {\n        this.expectHeader(4, function (data) {\n          var mask = data;\n          self.expectData(length, function (data) {\n            opcodes['10'].finish.call(self, mask, data);\n          });\n        });\n      } else {\n        this.expectData(length, function (data) {\n          opcodes['10'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function finish(mask, data) {\n      var self = this;\n      data = self.unmask(mask, data, true);\n      var state = clone(this.state);\n      this.messageHandlers.push(function (callback) {\n        self.onpong(data, {\n          masked: state.masked,\n          binary: true\n        });\n        callback();\n      });\n      this.flush();\n      this.endPacket();\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}