{"ast":null,"code":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\nexports.BufferUtil = {\n  merge: function merge(mergedBuffer, buffers) {\n    var offset = 0;\n\n    for (var i = 0, l = buffers.length; i < l; ++i) {\n      var buf = buffers[i];\n      buf.copy(mergedBuffer, offset);\n      offset += buf.length;\n    }\n  },\n  mask: function mask(source, _mask, output, offset, length) {\n    var maskNum = _mask.readUInt32LE(0, true);\n\n    var i = 0;\n\n    for (; i < length - 3; i += 4) {\n      var num = maskNum ^ source.readUInt32LE(i, true);\n      if (num < 0) num = 4294967296 + num;\n      output.writeUInt32LE(num, offset + i, true);\n    }\n\n    switch (length % 4) {\n      case 3:\n        output[offset + i + 2] = source[i + 2] ^ _mask[2];\n\n      case 2:\n        output[offset + i + 1] = source[i + 1] ^ _mask[1];\n\n      case 1:\n        output[offset + i] = source[i] ^ _mask[0];\n\n      case 0:\n        ;\n    }\n  },\n  unmask: function unmask(data, mask) {\n    var maskNum = mask.readUInt32LE(0, true);\n    var length = data.length;\n    var i = 0;\n\n    for (; i < length - 3; i += 4) {\n      var num = maskNum ^ data.readUInt32LE(i, true);\n      if (num < 0) num = 4294967296 + num;\n      data.writeUInt32LE(num, i, true);\n    }\n\n    switch (length % 4) {\n      case 3:\n        data[i + 2] = data[i + 2] ^ mask[2];\n\n      case 2:\n        data[i + 1] = data[i + 1] ^ mask[1];\n\n      case 1:\n        data[i] = data[i] ^ mask[0];\n\n      case 0:\n        ;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}