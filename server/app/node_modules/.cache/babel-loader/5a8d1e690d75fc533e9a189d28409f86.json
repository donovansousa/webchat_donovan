{"ast":null,"code":"var zlib = require('zlib');\n\nvar AVAILABLE_WINDOW_BITS = [8, 9, 10, 11, 12, 13, 14, 15];\nvar DEFAULT_WINDOW_BITS = 15;\nvar DEFAULT_MEM_LEVEL = 8;\nPerMessageDeflate.extensionName = 'permessage-deflate';\n/**\n * Per-message Compression Extensions implementation\n */\n\nfunction PerMessageDeflate(options, isServer, maxPayload) {\n  if (this instanceof PerMessageDeflate === false) {\n    throw new TypeError(\"Classes can't be function-called\");\n  }\n\n  this._options = options || {};\n  this._isServer = !!isServer;\n  this._inflate = null;\n  this._deflate = null;\n  this.params = null;\n  this._maxPayload = maxPayload || 0;\n}\n/**\n * Create extension parameters offer\n *\n * @api public\n */\n\n\nPerMessageDeflate.prototype.offer = function () {\n  var params = {};\n\n  if (this._options.serverNoContextTakeover) {\n    params.server_no_context_takeover = true;\n  }\n\n  if (this._options.clientNoContextTakeover) {\n    params.client_no_context_takeover = true;\n  }\n\n  if (this._options.serverMaxWindowBits) {\n    params.server_max_window_bits = this._options.serverMaxWindowBits;\n  }\n\n  if (this._options.clientMaxWindowBits) {\n    params.client_max_window_bits = this._options.clientMaxWindowBits;\n  } else if (this._options.clientMaxWindowBits == null) {\n    params.client_max_window_bits = true;\n  }\n\n  return params;\n};\n/**\n * Accept extension offer\n *\n * @api public\n */\n\n\nPerMessageDeflate.prototype.accept = function (paramsList) {\n  paramsList = this.normalizeParams(paramsList);\n  var params;\n\n  if (this._isServer) {\n    params = this.acceptAsServer(paramsList);\n  } else {\n    params = this.acceptAsClient(paramsList);\n  }\n\n  this.params = params;\n  return params;\n};\n/**\n * Releases all resources used by the extension\n *\n * @api public\n */\n\n\nPerMessageDeflate.prototype.cleanup = function () {\n  if (this._inflate) {\n    if (this._inflate.writeInProgress) {\n      this._inflate.pendingClose = true;\n    } else {\n      if (this._inflate.close) this._inflate.close();\n      this._inflate = null;\n    }\n  }\n\n  if (this._deflate) {\n    if (this._deflate.writeInProgress) {\n      this._deflate.pendingClose = true;\n    } else {\n      if (this._deflate.close) this._deflate.close();\n      this._deflate = null;\n    }\n  }\n};\n/**\n * Accept extension offer from client\n *\n * @api private\n */\n\n\nPerMessageDeflate.prototype.acceptAsServer = function (paramsList) {\n  var accepted = {};\n  var result = paramsList.some(function (params) {\n    accepted = {};\n\n    if (this._options.serverNoContextTakeover === false && params.server_no_context_takeover) {\n      return;\n    }\n\n    if (this._options.serverMaxWindowBits === false && params.server_max_window_bits) {\n      return;\n    }\n\n    if (typeof this._options.serverMaxWindowBits === 'number' && typeof params.server_max_window_bits === 'number' && this._options.serverMaxWindowBits > params.server_max_window_bits) {\n      return;\n    }\n\n    if (typeof this._options.clientMaxWindowBits === 'number' && !params.client_max_window_bits) {\n      return;\n    }\n\n    if (this._options.serverNoContextTakeover || params.server_no_context_takeover) {\n      accepted.server_no_context_takeover = true;\n    }\n\n    if (this._options.clientNoContextTakeover) {\n      accepted.client_no_context_takeover = true;\n    }\n\n    if (this._options.clientNoContextTakeover !== false && params.client_no_context_takeover) {\n      accepted.client_no_context_takeover = true;\n    }\n\n    if (typeof this._options.serverMaxWindowBits === 'number') {\n      accepted.server_max_window_bits = this._options.serverMaxWindowBits;\n    } else if (typeof params.server_max_window_bits === 'number') {\n      accepted.server_max_window_bits = params.server_max_window_bits;\n    }\n\n    if (typeof this._options.clientMaxWindowBits === 'number') {\n      accepted.client_max_window_bits = this._options.clientMaxWindowBits;\n    } else if (this._options.clientMaxWindowBits !== false && typeof params.client_max_window_bits === 'number') {\n      accepted.client_max_window_bits = params.client_max_window_bits;\n    }\n\n    return true;\n  }, this);\n\n  if (!result) {\n    throw new Error('Doesn\\'t support the offered configuration');\n  }\n\n  return accepted;\n};\n/**\n * Accept extension response from server\n *\n * @api privaye\n */\n\n\nPerMessageDeflate.prototype.acceptAsClient = function (paramsList) {\n  var params = paramsList[0];\n\n  if (this._options.clientNoContextTakeover != null) {\n    if (this._options.clientNoContextTakeover === false && params.client_no_context_takeover) {\n      throw new Error('Invalid value for \"client_no_context_takeover\"');\n    }\n  }\n\n  if (this._options.clientMaxWindowBits != null) {\n    if (this._options.clientMaxWindowBits === false && params.client_max_window_bits) {\n      throw new Error('Invalid value for \"client_max_window_bits\"');\n    }\n\n    if (typeof this._options.clientMaxWindowBits === 'number' && (!params.client_max_window_bits || params.client_max_window_bits > this._options.clientMaxWindowBits)) {\n      throw new Error('Invalid value for \"client_max_window_bits\"');\n    }\n  }\n\n  return params;\n};\n/**\n * Normalize extensions parameters\n *\n * @api private\n */\n\n\nPerMessageDeflate.prototype.normalizeParams = function (paramsList) {\n  return paramsList.map(function (params) {\n    Object.keys(params).forEach(function (key) {\n      var value = params[key];\n\n      if (value.length > 1) {\n        throw new Error('Multiple extension parameters for ' + key);\n      }\n\n      value = value[0];\n\n      switch (key) {\n        case 'server_no_context_takeover':\n        case 'client_no_context_takeover':\n          if (value !== true) {\n            throw new Error('invalid extension parameter value for ' + key + ' (' + value + ')');\n          }\n\n          params[key] = true;\n          break;\n\n        case 'server_max_window_bits':\n        case 'client_max_window_bits':\n          if (typeof value === 'string') {\n            value = parseInt(value, 10);\n\n            if (!~AVAILABLE_WINDOW_BITS.indexOf(value)) {\n              throw new Error('invalid extension parameter value for ' + key + ' (' + value + ')');\n            }\n          }\n\n          if (!this._isServer && value === true) {\n            throw new Error('Missing extension parameter value for ' + key);\n          }\n\n          params[key] = value;\n          break;\n\n        default:\n          throw new Error('Not defined extension parameter (' + key + ')');\n      }\n    }, this);\n    return params;\n  }, this);\n};\n/**\n * Decompress message\n *\n * @api public\n */\n\n\nPerMessageDeflate.prototype.decompress = function (data, fin, callback) {\n  var endpoint = this._isServer ? 'client' : 'server';\n\n  if (!this._inflate) {\n    var maxWindowBits = this.params[endpoint + '_max_window_bits'];\n    this._inflate = zlib.createInflateRaw({\n      windowBits: 'number' === typeof maxWindowBits ? maxWindowBits : DEFAULT_WINDOW_BITS\n    });\n  }\n\n  this._inflate.writeInProgress = true;\n  var self = this;\n  var buffers = [];\n  var cumulativeBufferLength = 0;\n\n  this._inflate.on('error', onError).on('data', onData);\n\n  this._inflate.write(data);\n\n  if (fin) {\n    this._inflate.write(new Buffer([0x00, 0x00, 0xff, 0xff]));\n  }\n\n  this._inflate.flush(function () {\n    cleanup();\n    callback(null, Buffer.concat(buffers));\n  });\n\n  function onError(err) {\n    cleanup();\n    callback(err);\n  }\n\n  function onData(data) {\n    if (self._maxPayload !== undefined && self._maxPayload !== null && self._maxPayload > 0) {\n      cumulativeBufferLength += data.length;\n\n      if (cumulativeBufferLength > self._maxPayload) {\n        buffers = [];\n        cleanup();\n        var err = {\n          type: 1009\n        };\n        callback(err);\n        return;\n      }\n    }\n\n    buffers.push(data);\n  }\n\n  function cleanup() {\n    if (!self._inflate) return;\n\n    self._inflate.removeListener('error', onError);\n\n    self._inflate.removeListener('data', onData);\n\n    self._inflate.writeInProgress = false;\n\n    if (fin && self.params[endpoint + '_no_context_takeover'] || self._inflate.pendingClose) {\n      if (self._inflate.close) self._inflate.close();\n      self._inflate = null;\n    }\n  }\n};\n/**\n * Compress message\n *\n * @api public\n */\n\n\nPerMessageDeflate.prototype.compress = function (data, fin, callback) {\n  var endpoint = this._isServer ? 'server' : 'client';\n\n  if (!this._deflate) {\n    var maxWindowBits = this.params[endpoint + '_max_window_bits'];\n    this._deflate = zlib.createDeflateRaw({\n      flush: zlib.Z_SYNC_FLUSH,\n      windowBits: 'number' === typeof maxWindowBits ? maxWindowBits : DEFAULT_WINDOW_BITS,\n      memLevel: this._options.memLevel || DEFAULT_MEM_LEVEL\n    });\n  }\n\n  this._deflate.writeInProgress = true;\n  var self = this;\n  var buffers = [];\n\n  this._deflate.on('error', onError).on('data', onData);\n\n  this._deflate.write(data);\n\n  this._deflate.flush(function () {\n    cleanup();\n    var data = Buffer.concat(buffers);\n\n    if (fin) {\n      data = data.slice(0, data.length - 4);\n    }\n\n    callback(null, data);\n  });\n\n  function onError(err) {\n    cleanup();\n    callback(err);\n  }\n\n  function onData(data) {\n    buffers.push(data);\n  }\n\n  function cleanup() {\n    if (!self._deflate) return;\n\n    self._deflate.removeListener('error', onError);\n\n    self._deflate.removeListener('data', onData);\n\n    self._deflate.writeInProgress = false;\n\n    if (fin && self.params[endpoint + '_no_context_takeover'] || self._deflate.pendingClose) {\n      if (self._deflate.close) self._deflate.close();\n      self._deflate = null;\n    }\n  }\n};\n\nmodule.exports = PerMessageDeflate;","map":null,"metadata":{},"sourceType":"script"}