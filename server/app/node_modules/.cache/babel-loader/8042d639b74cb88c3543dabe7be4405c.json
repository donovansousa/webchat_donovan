{"ast":null,"code":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\nvar events = require('events'),\n    util = require('util'),\n    crypto = require('crypto'),\n    EventEmitter = events.EventEmitter,\n    ErrorCodes = require('./ErrorCodes'),\n    bufferUtil = require('./BufferUtil'),\n    PerMessageDeflate = require('./PerMessageDeflate');\n/**\n * HyBi Sender implementation\n */\n\n\nfunction Sender(socket, extensions) {\n  if (this instanceof Sender === false) {\n    throw new TypeError(\"Classes can't be function-called\");\n  }\n\n  events.EventEmitter.call(this);\n  this._socket = socket;\n  this.extensions = extensions || {};\n  this.firstFragment = true;\n  this.compress = false;\n  this.messageHandlers = [];\n  this.processing = false;\n}\n/**\n * Inherits from EventEmitter.\n */\n\n\nutil.inherits(Sender, events.EventEmitter);\n/**\n * Sends a close instruction to the remote party.\n *\n * @api public\n */\n\nSender.prototype.close = function (code, data, mask, cb) {\n  if (typeof code !== 'undefined') {\n    if (typeof code !== 'number' || !ErrorCodes.isValidErrorCode(code)) throw new Error('first argument must be a valid error code number');\n  }\n\n  code = code || 1000;\n  var dataBuffer = new Buffer(2 + (data ? Buffer.byteLength(data) : 0));\n  writeUInt16BE.call(dataBuffer, code, 0);\n  if (dataBuffer.length > 2) dataBuffer.write(data, 2);\n  var self = this;\n  this.messageHandlers.push(function () {\n    self.frameAndSend(0x8, dataBuffer, true, mask);\n    if (typeof cb == 'function') cb();\n  });\n  this.flush();\n};\n/**\n * Sends a ping message to the remote party.\n *\n * @api public\n */\n\n\nSender.prototype.ping = function (data, options) {\n  var mask = options && options.mask;\n  var self = this;\n  this.messageHandlers.push(function () {\n    self.frameAndSend(0x9, data || '', true, mask);\n  });\n  this.flush();\n};\n/**\n * Sends a pong message to the remote party.\n *\n * @api public\n */\n\n\nSender.prototype.pong = function (data, options) {\n  var mask = options && options.mask;\n  var self = this;\n  this.messageHandlers.push(function () {\n    self.frameAndSend(0xa, data || '', true, mask);\n  });\n  this.flush();\n};\n/**\n * Sends text or binary data to the remote party.\n *\n * @api public\n */\n\n\nSender.prototype.send = function (data, options, cb) {\n  var finalFragment = options && options.fin === false ? false : true;\n  var mask = options && options.mask;\n  var compress = options && options.compress;\n  var opcode = options && options.binary ? 2 : 1;\n\n  if (this.firstFragment === false) {\n    opcode = 0;\n    compress = false;\n  } else {\n    this.firstFragment = false;\n    this.compress = compress;\n  }\n\n  if (finalFragment) this.firstFragment = true;\n  var compressFragment = this.compress;\n  var self = this;\n  this.messageHandlers.push(function () {\n    if (!data || !compressFragment) {\n      self.frameAndSend(opcode, data, finalFragment, mask, compress, cb);\n      return;\n    }\n\n    self.processing = true;\n    self.applyExtensions(data, finalFragment, compressFragment, function (err, data) {\n      if (err) {\n        if (typeof cb == 'function') cb(err);else self.emit('error', err);\n        return;\n      }\n\n      self.frameAndSend(opcode, data, finalFragment, mask, compress, cb);\n      self.processing = false;\n      self.flush();\n    });\n  });\n  this.flush();\n};\n/**\n * Frames and sends a piece of data according to the HyBi WebSocket protocol.\n *\n * @api private\n */\n\n\nSender.prototype.frameAndSend = function (opcode, data, finalFragment, maskData, compressed, cb) {\n  var canModifyData = false;\n\n  if (!data) {\n    try {\n      this._socket.write(new Buffer([opcode | (finalFragment ? 0x80 : 0), 0 | (maskData ? 0x80 : 0)].concat(maskData ? [0, 0, 0, 0] : [])), 'binary', cb);\n    } catch (e) {\n      if (typeof cb == 'function') cb(e);else this.emit('error', e);\n    }\n\n    return;\n  }\n\n  if (!Buffer.isBuffer(data)) {\n    canModifyData = true;\n\n    if (data && (typeof data.byteLength !== 'undefined' || typeof data.buffer !== 'undefined')) {\n      data = getArrayBuffer(data);\n    } else {\n      //\n      // If people want to send a number, this would allocate the number in\n      // bytes as memory size instead of storing the number as buffer value. So\n      // we need to transform it to string in order to prevent possible\n      // vulnerabilities / memory attacks.\n      //\n      if (typeof data === 'number') data = data.toString();\n      data = new Buffer(data);\n    }\n  }\n\n  var dataLength = data.length,\n      dataOffset = maskData ? 6 : 2,\n      secondByte = dataLength;\n\n  if (dataLength >= 65536) {\n    dataOffset += 8;\n    secondByte = 127;\n  } else if (dataLength > 125) {\n    dataOffset += 2;\n    secondByte = 126;\n  }\n\n  var mergeBuffers = dataLength < 32768 || maskData && !canModifyData;\n  var totalLength = mergeBuffers ? dataLength + dataOffset : dataOffset;\n  var outputBuffer = new Buffer(totalLength);\n  outputBuffer[0] = finalFragment ? opcode | 0x80 : opcode;\n  if (compressed) outputBuffer[0] |= 0x40;\n\n  switch (secondByte) {\n    case 126:\n      writeUInt16BE.call(outputBuffer, dataLength, 2);\n      break;\n\n    case 127:\n      writeUInt32BE.call(outputBuffer, 0, 2);\n      writeUInt32BE.call(outputBuffer, dataLength, 6);\n  }\n\n  if (maskData) {\n    outputBuffer[1] = secondByte | 0x80;\n    var mask = getRandomMask();\n    outputBuffer[dataOffset - 4] = mask[0];\n    outputBuffer[dataOffset - 3] = mask[1];\n    outputBuffer[dataOffset - 2] = mask[2];\n    outputBuffer[dataOffset - 1] = mask[3];\n\n    if (mergeBuffers) {\n      bufferUtil.mask(data, mask, outputBuffer, dataOffset, dataLength);\n\n      try {\n        this._socket.write(outputBuffer, 'binary', cb);\n      } catch (e) {\n        if (typeof cb == 'function') cb(e);else this.emit('error', e);\n      }\n    } else {\n      bufferUtil.mask(data, mask, data, 0, dataLength);\n\n      try {\n        this._socket.write(outputBuffer, 'binary');\n\n        this._socket.write(data, 'binary', cb);\n      } catch (e) {\n        if (typeof cb == 'function') cb(e);else this.emit('error', e);\n      }\n    }\n  } else {\n    outputBuffer[1] = secondByte;\n\n    if (mergeBuffers) {\n      data.copy(outputBuffer, dataOffset);\n\n      try {\n        this._socket.write(outputBuffer, 'binary', cb);\n      } catch (e) {\n        if (typeof cb == 'function') cb(e);else this.emit('error', e);\n      }\n    } else {\n      try {\n        this._socket.write(outputBuffer, 'binary');\n\n        this._socket.write(data, 'binary', cb);\n      } catch (e) {\n        if (typeof cb == 'function') cb(e);else this.emit('error', e);\n      }\n    }\n  }\n};\n/**\n * Execute message handler buffers\n *\n * @api private\n */\n\n\nSender.prototype.flush = function () {\n  while (!this.processing && this.messageHandlers.length) {\n    this.messageHandlers.shift()();\n  }\n};\n/**\n * Apply extensions to message\n *\n * @api private\n */\n\n\nSender.prototype.applyExtensions = function (data, fin, compress, callback) {\n  if ((data.buffer || data) instanceof ArrayBuffer) {\n    data = getArrayBuffer(data);\n  }\n\n  this.extensions[PerMessageDeflate.extensionName].compress(data, fin, callback);\n};\n\nmodule.exports = Sender;\n\nfunction writeUInt16BE(value, offset) {\n  this[offset] = (value & 0xff00) >> 8;\n  this[offset + 1] = value & 0xff;\n}\n\nfunction writeUInt32BE(value, offset) {\n  this[offset] = (value & 0xff000000) >> 24;\n  this[offset + 1] = (value & 0xff0000) >> 16;\n  this[offset + 2] = (value & 0xff00) >> 8;\n  this[offset + 3] = value & 0xff;\n}\n\nfunction getArrayBuffer(data) {\n  // data is either an ArrayBuffer or ArrayBufferView.\n  var array = new Uint8Array(data.buffer || data),\n      l = data.byteLength || data.length,\n      o = data.byteOffset || 0,\n      buffer = new Buffer(l);\n\n  for (var i = 0; i < l; ++i) {\n    buffer[i] = array[o + i];\n  }\n\n  return buffer;\n}\n\nfunction getRandomMask() {\n  return crypto.randomBytes(4);\n}","map":null,"metadata":{},"sourceType":"script"}